//Clase Travel
package clases

abstract class Travel {
    abstract val country:String
    abstract val city:String
    protected val serviceType = "Viaje"
    protected var reserved = false
    protected var paidAmount = 0

    abstract fun quotePrice(numDays: Int)
    protected abstract fun getPrice(numDays: Int):Int

    fun reserve(numDays:Int){
        if (reserved){
            println("""""Ya reservaste tu viaje!
                    Pais : $country
                    Ciudad: $city
                    Precio: $paidAmount""".trimMargin())
            return
        }
        val amount = getPrice(numDays)
        if(amount==0){
            return
        }
        reserved = true
        paidAmount = amount
        println("""Â¡Viaje reservado exitosamente!
            Pais: $country
            Ciudad: $city
            Precio: $paidAmount""".trimMargin())
    }
}
----Clase Nacional-----
package clases

open class National(override val city:String): Travel(){
    override val country = "Mexico"

    protected val fees = mapOf(
        "Monterrey" to 400,
        "Guadalajara" to 350,
        "CDMX" to 360,
        "San Cristobal de las casas" to 240,
        "San Miguel de Allende" to 320
    )
    override fun getPrice(numDays: Int):Int{
        val fee= fees[city]
        return if(fee==null)0 else fee*numDays
    }
    override fun quotePrice(numDays: Int){
        val price = getPrice(numDays)
        if (price==0){
            println("Lo sentimos no hacemos viajes a esta ciudad")
        }else{
            println("Tu viaje a $city cuesta \$$price")
        }
    }
}
-----Nacional Low Season-------
package clases

import Interfaces.IPromotion

class NationalLowSeason(city:String): National(city),IPromotion {
    override val discount = 10
    override val typeDiscount = 0

    override fun getPrice(numDays: Int): Int{
        val amount = super.getPrice(numDays)
        return if (amount==0)0 else getDiscountPrice(amount)
    }
}
------Main-----
import clases.*

fun main(){
    val viajeMonterrey = National(city = "Monterrey")
    viajeMonterrey.reserve(numDays = 4)
    val viajeBajaMonterrey = NationalLowSeason(city = "Monterrey")
    viajeBajaMonterrey.reserve(numDays = 3)

}
